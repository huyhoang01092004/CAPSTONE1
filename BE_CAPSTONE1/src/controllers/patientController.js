import * as PatientModel from "../models/Patient.js";
import db from "../config/db.js";

// üìå L·∫•y danh s√°ch b·ªánh nh√¢n
export const getPatients = async (req, res) => {
  try {
    const patients = await PatientModel.findAll();
    res.json({ success: true, data: patients });
  } catch (err) {
    console.error("‚ùå getPatients error:", err);
    res.status(500).json({ success: false, error: err.message });
  }
};

// üìå L·∫•y b·ªánh nh√¢n theo patient_id
export const getPatientById = async (req, res) => {
  try {
    const patient = await PatientModel.findById(req.params.id);
    if (!patient) {
      return res
        .status(404)
        .json({ success: false, message: "Patient not found" });
    }
    res.json({ success: true, data: patient });
  } catch (err) {
    console.error("‚ùå getPatientById error:", err);
    res.status(500).json({ success: false, error: err.message });
  }
};

// üìå L·∫•y b·ªánh nh√¢n theo user_id (auto t·∫°o n·∫øu ch∆∞a c√≥)
export const getPatientByUserId = async (req, res) => {
  try {
    const patient = await PatientModel.getOrCreateByUserId(req.params.userId);
    res.json({ success: true, data: patient });
  } catch (err) {
    console.error("‚ùå getPatientByUserId error:", err);
    res.status(500).json({ success: false, error: err.message });
  }
};

// üìå T·∫°o b·ªánh nh√¢n guest (ƒë·∫∑t l·ªãch cho ng∆∞·ªùi kh√°c)
export const createGuestPatient = async (req, res) => {
  try {
    const { full_name, phone, email, dob, gender, allergies, medical_history } =
      req.body;

    const newPatient = await PatientModel.createGuest(
      { full_name, phone, email, dob, gender },
      { allergies, medical_history }
    );

    res.status(201).json({ success: true, data: newPatient });
  } catch (err) {
    console.error("‚ùå createGuestPatient error:", err);
    res.status(500).json({ success: false, error: err.message });
  }
};

// üìå C·∫≠p nh·∫≠t h·ªì s∆° (update c·∫£ users + patients)
export const updatePatient = async (req, res) => {
  try {
    const updated = await PatientModel.updateProfile(req.params.id, req.body);
    if (!updated) {
      return res
        .status(404)
        .json({ success: false, message: "Patient not found" });
    }
    res.json({ success: true, message: "Patient updated successfully" });
  } catch (err) {
    console.error("‚ùå updatePatient error:", err);
    res.status(500).json({ success: false, error: err.message });
  }
};

// üìå X√≥a m·ªÅm b·ªánh nh√¢n
export const deletePatient = async (req, res) => {
  try {
    const affected = await PatientModel.remove(req.params.id);
    if (!affected) {
      return res
        .status(404)
        .json({ success: false, message: "Patient not found" });
    }
    res.json({ success: true, message: "Patient deactivated" });
  } catch (err) {
    console.error("‚ùå deletePatient error:", err);
    res.status(500).json({ success: false, error: err.message });
  }
};

// ================== T·∫†O PATIENT CHO USER ==================
export const createPatientForUser = async (req, res) => {
  const {
    user_id,
    insurance_number,
    blood_type,
    allergies,
    medical_history,
    emergency_full_name,
    emergency_phone,
    emergency_relationship,
  } = req.body;

  try {
    // 1. Ki·ªÉm tra user c√≥ t·ªìn t·∫°i & active
    const [users] = await db.execute(
      `SELECT * FROM users WHERE user_id = ? AND is_active = 1`,
      [user_id]
    );

    if (!users.length) {
      return res.status(404).json({
        success: false,
        message: "User not found or not active",
      });
    }

    // 2. Ki·ªÉm tra user ƒë√£ c√≥ patient ch∆∞a
    const existingPatient = await PatientModel.findByUserId(user_id);
    if (existingPatient) {
      return res.status(200).json({
        success: true,
        message: "Patient already exists for this user",
        data: existingPatient,
      });
    }

    // 3. T·∫°o m·ªõi patient
    const patientId = await PatientModel.create({
      user_id,
      insurance_number,
      blood_type,
      allergies,
      medical_history,
      emergency_full_name,
      emergency_phone,
      emergency_relationship,
    });

    const newPatient = await PatientModel.findById(patientId);

    return res.status(201).json({
      success: true,
      message: "Patient created successfully",
      data: newPatient,
    });
  } catch (error) {
    console.error("‚ùå Error creating patient:", error);
    res.status(500).json({
      success: false,
      message: "Server error",
    });
  }
};
