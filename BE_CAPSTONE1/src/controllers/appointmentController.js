// src/controllers/appointmentController.js
import * as Appointment from "../models/appointmentModel.js";

// üìå L·∫•y t·∫•t c·∫£ l·ªãch h·∫πn
export const getAppointments = async (req, res) => {
  try {
    const data = await Appointment.findAll();
    res.json(data);
  } catch (err) {
    console.error("‚ùå L·ªói getAppointments:", err);
    res.status(500).json({ error: "Server error", details: err.message });
  }
};

// üìå L·∫•y l·ªãch h·∫πn theo ID
export const getAppointment = async (req, res) => {
  try {
    const data = await Appointment.findById(req.params.id);
    if (!data) {
      return res.status(404).json({ message: "Appointment not found" });
    }
    res.json(data);
  } catch (err) {
    console.error("‚ùå L·ªói getAppointment:", err);
    res.status(500).json({ error: "Server error", details: err.message });
  }
};

// üìå T·∫°o m·ªõi l·ªãch h·∫πn
export const createAppointment = async (req, res) => {
  try {
    const {
      patient_id,
      doctor_id,
      department_id,
      scheduled_start,
      scheduled_end,
      status,
      reason,
      booking_channel,
      created_by_user_id,
      note,
    } = req.body;

    // üîé 1. Validate input
    if (
      !patient_id ||
      !doctor_id ||
      !department_id ||
      !scheduled_start ||
      !scheduled_end
    ) {
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc!" });
    }

    // üîé 2. Ki·ªÉm tra slot ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t ch∆∞a
    const available = await Appointment.isTimeSlotAvailable(
      doctor_id,
      scheduled_start,
      scheduled_end
    );

    if (!available) {
      return res.status(400).json({
        message: "‚ùå Slot n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t, vui l√≤ng ch·ªçn gi·ªù kh√°c.",
      });
    }

    // üÜï 3. T·∫°o m·ªõi (√©p undefined -> null)
    const appointment = await Appointment.create({
      patient_id: patient_id ?? null,
      doctor_id: doctor_id ?? null,
      department_id: department_id ?? null,
      scheduled_start: scheduled_start ?? null,
      scheduled_end: scheduled_end ?? null,
      status: status ?? "pending",
      reason: reason ?? null,
      booking_channel: booking_channel ?? "web",
      created_by_user_id: created_by_user_id ?? null,
      note: note ?? null,
    });

    res.status(201).json(appointment);
  } catch (err) {
    console.error("‚ùå L·ªói createAppointment:", err);
    res.status(500).json({ message: "Server error", details: err.message });
  }
};

// üìå C·∫≠p nh·∫≠t l·ªãch h·∫πn
export const updateAppointment = async (req, res) => {
  try {
    const updated = await Appointment.update(req.params.id, req.body);
    if (!updated) {
      return res.status(404).json({ message: "Appointment not found" });
    }
    res.json({ message: "Updated successfully", appointment: updated });
  } catch (err) {
    console.error("‚ùå L·ªói updateAppointment:", err);
    res.status(500).json({ error: "Server error", details: err.message });
  }
};

// üìå H·ªßy l·ªãch h·∫πn (soft delete)
export const deleteAppointment = async (req, res) => {
  try {
    const deleted = await Appointment.remove(req.params.id);
    if (!deleted) {
      return res.status(404).json({ message: "Appointment not found" });
    }
    res.json({ message: "Deleted successfully" });
  } catch (err) {
    console.error("‚ùå L·ªói deleteAppointment:", err);
    res.status(500).json({ error: "Server error", details: err.message });
  }
};
